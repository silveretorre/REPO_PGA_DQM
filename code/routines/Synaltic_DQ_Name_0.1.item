package routines;

import java.util.regex.Matcher;
import org.apache.commons.lang.WordUtils;
import org.apache.commons.lang.StringUtils;
import java.util.regex.Pattern;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Synaltic_DQ_Name {
	
	/** Use or not fully capitalyze Lastname **/
    private static final boolean CAPITALIZE = false;

    /**
     * normalizeFirstName: Normalize a firstName 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} normalizeFirstName("Mr Jean-DANIEL --") # Jean-Daniel !.
     */
    public static String normalizeFirstName(String firstname) {
        String normalizedFirstName = null;
        if(firstname != null && !"".equals(firstname)) {
        	String cleanUpFirstName = firstname.toUpperCase().trim();
        	/*remove incorrect values and put null instead*/
        	String incorrectValues = incorrectValues_FirstName(cleanUpFirstName);
        	/*remove specials characters*/
        	String removeSpecialValues = removeSpecialValues_FirstName(incorrectValues);
        	/*normalize firstname*/
        	normalizedFirstName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1);
        }
        return normalizedFirstName;
    }
    
    /**
     * removeSpecialValues_FirstName: List of specific values (depends on the project) to remove from Firstname
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} removeSpecialValues_FirstName("Mr Jean-DANIEl --") # "Mr JeanDANIEl "
     */
    private static String removeSpecialValues_FirstName(String firstname) {
    	String result = null;
    	if (firstname != null) {
    		result = firstname.replaceAll("\\.","");
    	}
    	return result;
    }
    
    
    /**
     * incorrectValues_FirstName: List of specific values (depends on the project) that are incorrect and need to be null
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("NC") 
     * 
     * {example} incorrectValues_FirstName("NC") # null
     */
    private static String incorrectValues_FirstName(String firstname) {
    	if("NC".equals(firstname) || "--".equals(firstname) || ".".equals(firstname) ) {
    		firstname = null;
    	}
    	return firstname;
    }
    
    /**
     * standardizeFirstName: Standardize FirstName to deduplicate 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") input: The string need to be printed.
     * 
     * {example} standardizeFirstName("Mr Jean-DANIEL --") # JEAN DANIEL !.
     */
    public static String standardizeFirstName(String firstname) {
        String normalizedFirstName = normalizeFirstName(firstname);
        String standardizedFirstName = normalizedFirstName;
        if(normalizedFirstName != null && !"".equals(normalizedFirstName)) {
        	standardizedFirstName = TalendString.removeAccents(StringUtils.strip((normalizedFirstName.toUpperCase())) ).replaceAll("-"," ");
        }
        return standardizedFirstName;
    }
    
    
    /**
     * normalizeFirstName: Normalize a lastName 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Martin")
     * 
     * {example} normalizeFirstName("Martin") # Martin or MARTIN
     */
    public static String normalizeLastName(String lastname) {
        String normalizedLastName = null;
        if(lastname != null && !"".equals(lastname)) {
        	String cleanUpFirstName = lastname.toUpperCase().trim();
        	/*remove incorrect values and put null instead*/
        	String incorrectValues = incorrectValues_LastName(cleanUpFirstName);
        	/*remove specials characters*/
        	String removeSpecialValues = removeSpecialValues_LastName(incorrectValues);
        	/*normalize lastname*/
        	if(removeSpecialValues != null) {
        		if(CAPITALIZE) {
            		normalizedLastName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1);
            	} else {
            		normalizedLastName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1).toUpperCase();
            	}
        	}	
        }
        return normalizedLastName;
    }
    
    /**
     * removeSpecialValues_LastName: List of specific values (depends on the project) to remove from Lastname
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Martin.") 
     * 
     * {example} removeSpecialValues_FirstName("Martin.") # Martin
     */
    private static String removeSpecialValues_LastName(String lastname) {
    	String result = null;
    	if (lastname != null) {
    		result = lastname.replaceAll("\\.","");
    	}
    	return result;
    }
    
    
    /**
     * incorrectValues_LastName: List of specific values (depends on the project) that are incorrect and need to be null
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("NC") 
     * 
     * {example} incorrectValues_LastName("NC") # null
     */
    private static String incorrectValues_LastName(String lastname) {
    	if("NC".equals(lastname) || "--".equals(lastname) || ".".equals(lastname) ) {
    		lastname = null;
    	}
    	return lastname;
    }
    
    /**
     * standardizeLastName: Standardize LastName to deduplicate 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} standardizeLastName("Mr Jean-DANIEL --") # JEAN DANIEL !.
     */
    public static String standardizeLastName(String lastname) {
        String normalizedLastName = normalizeFirstName(lastname);
        String standardizedLastName = normalizedLastName;
        if(normalizedLastName != null && !"".equals(normalizedLastName)) {
        	standardizedLastName = TalendString.removeAccents(StringUtils.strip((normalizedLastName.toUpperCase())) ).replaceAll("-"," ");
        }
        return standardizedLastName;
    }
    
    /**
     * isNotPhysicalPerson: Identify non physical Person (function NOTUSED at the moment)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string() 
     * 
     * {example} standardizeLastName() # 
     */
    public static Boolean isNotPhysicalPerson (String field) {
    	Boolean result = false;
    	 Pattern p = Pattern
                 .compile("^\\s?((BCAUTO|AUTOMOBILE|ENCHERES|)\\.?\\s)(.*)$");
         Matcher m = p.matcher(field);

         if (m.find()) {
        	 result = true;
         }
         return result;
    }
    	
         
}
