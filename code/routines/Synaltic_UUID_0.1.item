package routines;

import java.util.Iterator;
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Synaltic_UUID {

    /**
     * getNewUUID: generate a new UUID. (Currently that's a very standard code, but may change in the future)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} Synaltic
     * 
     *
     * 
     * {example} getNewUUID() # ed3fb510-0719-4ce5-8a91-aec2fbf23673.
     */
    public static String getNewUUID() {
    	return java.util.UUID.randomUUID().toString();
    }
    
    
    public static String setMDMUUIDinJSON(String person_uuid, String vehicle_uuid, String jsonDoc ){
    	if(jsonDoc == null)
    		return null ;
    	ObjectMapper mapper = new ObjectMapper();
    	JsonNode root = mapper.readTree(input_row.jsonDoc);


    	// Insertion du vehicle_id dans le document JSON et suppression des autres champs
    	for(Iterator<String> i = root.path("pga_process_data").get("vehicle").fieldNames() ; i.hasNext()){
    		String currentNode =	i.next() ;
    		if(!"raw".equalsIgnoreCase(currentNode)) {
    			((ObjectNode)root.path("pga_process_data").path("vehicle").remove(currentNode));
    			}
    	}
    	((ObjectNode) root.path("pga_process_data").path("vehicle").put("vehicle_uuid", input_row.vehicle_uuid));


    	// Insertion du person_uuid dans le document JSON et suppression des autres champs
    	for(Iterator<String> i = root.path("pga_process_data").get("person").fieldNames() ; i.hasNext()){
    		String currentNode =	i.next() ;
    		if(!"raw".equalsIgnoreCase(currentNode)) {
    			((ObjectNode)root.path("pga_process_data").path("vehicle").remove(currentNode));
    			}
    	}
    	((ObjectNode) root.path("pga_process_data").path("person").put("person_uuid", input_row.vehicle_uuid));



    	// Le JsonNode est converti en String
    	output_row.body = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(root);
    	
}
}
