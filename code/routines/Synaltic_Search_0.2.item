package routines;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Synaltic_Search {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String searchPerson(String query, String from, String size) throws JsonProcessingException {
        /*
         {
  "query": {
    "query_string": {
      "query": "Remi ABID",
      "fields": [
        "Person.lastname",
        "Person.firstname",
        "Person.Phone.phone_number_norm",
        "Person.Vehicle_links.Vehicle_link.RegistrationNumber",
        "Person.Vehicle_links.Vehicle_link.vin",
        "Person.Email.email_norm" 
      ]
    }
  },
  "from": "0",
  "size": "20" 
}
         */
    	ObjectMapper mapper = new ObjectMapper();
    	
    	ObjectNode queryRootNode = mapper.createObjectNode();
    	ObjectNode queryStringNode = mapper.createObjectNode();
    	ObjectNode queryNode = mapper.createObjectNode();
    	ObjectNode fieldsNode = mapper.createObjectNode();
    	ArrayNode fieldsArray = mapper.createArrayNode();
    	ObjectNode fromNode = mapper.createObjectNode();
    	ObjectNode sizeNode = mapper.createObjectNode();

    	//Définition des champs dans lesquels la recherche sera effectuée
    	fieldsArray.add("Person.lastname");
    	fieldsArray.add("Person.firstname");
    	fieldsArray.add("Person.phones.phone_number_norm");
    	fieldsArray.add("Person.vehicles_links.RegistrationNumber");
    	fieldsArray.add("Person.vehicles_links.vin");
    	fieldsArray.add("Person.emails.email_norm");
    	
    	queryNode.put("query", query);
    	fieldsNode.putPOJO("fields",fieldsArray);
    	fieldsNode.put("query", query);
    	fieldsNode.put("default_operator", "AND");
    	
    	
    	queryStringNode.putPOJO("query_string", fieldsNode);
    	
    	queryRootNode.putPOJO("query",queryStringNode);
    	queryRootNode.put("from",from);
    	queryRootNode.put("size",size);
    	
    	
    	//System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode));    
   
    	return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode);

    	 
    	
    	
    }
    
    public static String searchEvent(String person_uuid, String vehicle_uuid, String event_type, String from, String size) throws JsonProcessingException{
    	/* On souhaite obtenir un document JSON comme celui ci dessous, en fonction des valeurs des paramètres
    	 {
  "query": {
    "bool": {
      "must": [
        {
          "match_phrase": {
            "pga_process_data.person.person_uuid": "d3a28d42-1a9c-43ed-9db1-1fcf89090e92"
          }
        },
        {
          "match_phrase": {
            "pga_process_data.vehicle.vehicle_uuid": "d3a28d42-1a9c-43ed-9db1-1fcf89090e92"
          }
        },
        {
          "match_phrase": {
            "pga_process_data.header.process_type": "REGISTRATION"
          }
        }
      ]
    }
  }
}
    	 */
    	
    	//On met à nulle les valeurs vides
    	if(person_uuid !=null && "".equals(person_uuid.trim()))
    		person_uuid = null;
    	if(vehicle_uuid !=null && "".equals(vehicle_uuid.trim()))
    		vehicle_uuid = null;
    	if(event_type !=null && "".equals(event_type.trim()))
    		event_type = null;
    	
    	
    	//On initialise les objets pour construire le document JSON
    	ObjectMapper mapper = new ObjectMapper();
    	
    	ObjectNode queryRootNode = mapper.createObjectNode();
    	//ObjectNode queryNode = mapper.createObjectNode();
    	ObjectNode boolNode = mapper.createObjectNode();
    	ObjectNode mustNode = mapper.createObjectNode();
    	ArrayNode mustArray = mapper.createArrayNode();
    	ObjectNode matchPhraseNode = mapper.createObjectNode();
    	ObjectNode fieldValueNode = mapper.createObjectNode();
    	
    	//Si person et vehicle ne sont pas retourné, pour éviter de pouvoir tout requêter (sécurité), on rajoute une recherche fake
    	if(person_uuid == null  && vehicle_uuid == null){
    		fieldValueNode.put("pga_process_data.header.easter_egg", "NoWay");
    		matchPhraseNode.putPOJO("match_phrase", fieldValueNode.deepCopy());
    		mustArray.add(matchPhraseNode.deepCopy());
    	}
    	matchPhraseNode.removeAll();
    	fieldValueNode.removeAll();
    	
    	if(person_uuid != null){
    		fieldValueNode.put("pga_process_data.person.person_uuid", person_uuid);
    		matchPhraseNode.putPOJO("match_phrase", fieldValueNode.deepCopy());
    		mustArray.add(matchPhraseNode.deepCopy());
    	}
    	matchPhraseNode.removeAll();
    	fieldValueNode.removeAll();
    	
    	if(vehicle_uuid != null){
    		fieldValueNode.put("pga_process_data.vehicle.vehicle_uuid", vehicle_uuid);
    		matchPhraseNode.putPOJO("match_phrase", fieldValueNode.deepCopy());
    		mustArray.add(matchPhraseNode.deepCopy());
    	}
    	matchPhraseNode.removeAll();
    	fieldValueNode.removeAll();
    	
    	if(event_type != null){
    		fieldValueNode.put("pga_process_data.header.process_type", event_type);
    		matchPhraseNode.putPOJO("match_phrase", fieldValueNode.deepCopy());
    		mustArray.add(matchPhraseNode.deepCopy());
    	}
    	matchPhraseNode.removeAll();
    	fieldValueNode.removeAll();
    	
    	
    	mustNode.putPOJO("must",mustArray);
    	boolNode.putPOJO("bool", mustNode);
    	queryRootNode.putPOJO("query", boolNode);
    	queryRootNode.put("from",from);
    	queryRootNode.put("size",size);
    	
    	
    	
    	try {
			return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode);
		} catch (JsonProcessingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		} 
    }
    
    public static String searchPersonV2(String query, String from, String size) throws JsonProcessingException {
    	
    	ObjectMapper mapper = new ObjectMapper();

    	ObjectNode queryRootNode = mapper.createObjectNode();
    	ObjectNode queryStringNode = mapper.createObjectNode();
    	ObjectNode queryNode = mapper.createObjectNode();
    	ObjectNode fieldsNode = mapper.createObjectNode();
    	ObjectNode fromNode = mapper.createObjectNode();
    	ObjectNode sizeNode = mapper.createObjectNode();
    	ArrayNode fieldsArray = mapper.createArrayNode();
    	
    	queryRootNode.put("query",query);
    	
    	fieldsArray.add("Person.lastname");
    	fieldsArray.add("Person.firstname");
    	fieldsArray.add("Person.vehicles_links.vin");
    	
    	fieldsNode.putPOJO("fields", fieldsArray);
    	fieldsNode.put("query", queryNode);
    	fieldsNode.put("default_operator", "AND");
    	
    	queryStringNode.put("query_string", fieldsNode);
    	
    	queryRootNode.putPOJO("query",queryStringNode);
    	queryRootNode.put("from",fromNode);
    	queryRootNode.put("size",sizeNode);
    	
    	
    	return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode);
    		
    	
    }
    
    public static void main(String[] args){
    	try {
			System.out.println(searchPersonV2("UU1HSDJ9F53816930","0","10"));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}
