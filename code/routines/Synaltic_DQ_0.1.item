package routines;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.WordUtils;
import org.apache.commons.validator.routines.EmailValidator;


/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Synaltic_DQ {
	
	/** Use or not fully capitalyze Lastname **/
    private static final boolean CAPITALIZE = false;

    /**
     * normalizeFirstName: Normalize a firstName 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} normalizeFirstName("Mr Jean-DANIEL --") # Jean-Daniel !.
     */
    public static String normalizeFirstName(String firstname) {
        String normalizedFirstName = null;
        if(firstname != null && !"".equals(firstname)) {
        	String cleanUpFirstName = firstname.toUpperCase().trim();
        	/*remove incorrect values and put null instead*/
        	String incorrectValues = incorrectValues_FirstName(cleanUpFirstName);
        	/*remove specials characters*/
        	String removeSpecialValues = removeSpecialValues_FirstName(incorrectValues);
        	/*normalize firstname*/
        	normalizedFirstName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1);
        }
        return normalizedFirstName;
    }
    
    /**
     * removeSpecialValues_FirstName: List of specific values (depends on the project) to remove from Firstname
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} removeSpecialValues_FirstName("Mr Jean-DANIEl --") # "Mr JeanDANIEl "
     */
    private static String removeSpecialValues_FirstName(String firstname) {
    	String result = null;
    	if (firstname != null) {
    		result = firstname.replaceAll("\\.","").replaceAll("\\?","");
    		if("".equals(result)) {
    			result = null;
    		}
    	}
    	return result;
    }
    
    
    /**
     * incorrectValues_FirstName: List of specific values (depends on the project) that are incorrect and need to be null
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("NC") 
     * 
     * {example} incorrectValues_FirstName("NC") # null
     */
    private static String incorrectValues_FirstName(String firstname) {
    	if("NC".equals(firstname) || "--".equals(firstname) || ".".equals(firstname) || "".equals(firstname) || "?".equals(firstname) ) {
    		firstname = null;
    	}
    	return firstname;
    }
    
    /**
     * standardizeFirstName: Standardize FirstName to deduplicate 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") input: The string need to be printed.
     * 
     * {example} standardizeFirstName("Mr Jean-DANIEL --") # JEAN DANIEL !.
     */
    public static String standardizeFirstName(String firstname) {
        String normalizedFirstName = normalizeFirstName(firstname);
        String standardizedFirstName = normalizedFirstName;
        if(normalizedFirstName != null && !"".equals(normalizedFirstName)) {
        	standardizedFirstName = TalendString.removeAccents(StringUtils.strip((normalizedFirstName.toUpperCase())) ).replaceAll("-"," ");
        }
        return standardizedFirstName;
    }
    
    
    /**
     * normalizeFirstName: Normalize a lastName 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Martin")
     * 
     * {example} normalizeFirstName("Martin") # Martin or MARTIN
     */
    public static String normalizeLastName(String lastname) {
        String normalizedLastName = null;
        if(lastname != null && !"".equals(lastname)) {
        	String cleanUpFirstName = lastname.toUpperCase().trim();
        	/*remove incorrect values and put null instead*/
        	String incorrectValues = incorrectValues_LastName(cleanUpFirstName);
        	/*remove specials characters*/
        	String removeSpecialValues = removeSpecialValues_LastName(incorrectValues);
        	/*normalize lastname*/
        	if(removeSpecialValues != null) {
        		if(CAPITALIZE) {
            		normalizedLastName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1);
            	} else {
            		normalizedLastName = DQTechnical.removeTitle(WordUtils.capitalizeFully(removeSpecialValues),1).toUpperCase();
            	}
        	}	
        }
        return normalizedLastName;
    }
    
    /**
     * removeSpecialValues_LastName: List of specific values (depends on the project) to remove from Lastname
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Martin.") 
     * 
     * {example} removeSpecialValues_FirstName("Martin.") # Martin
     */
    private static String removeSpecialValues_LastName(String lastname) {
    	String result = null;
    	if (lastname != null) {
    		result = lastname.replaceAll("\\.","").replaceAll("\\?","");
    		if("".equals(result)) {
    			result = null;
    		}
    	}
    	return result;
    }
    
    
    /**
     * incorrectValues_LastName: List of specific values (depends on the project) that are incorrect and need to be null
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("NC") 
     * 
     * {example} incorrectValues_LastName("NC") # null
     */
    private static String incorrectValues_LastName(String lastname) {
    	if("NC".equals(lastname) || "--".equals(lastname) || ".".equals(lastname) || "".equals(lastname) || "?".equals(lastname) ) {
    		lastname = null;
    	}
    	return lastname;
    }
   
    /**
     * standardizeLastName: Standardize LastName to deduplicate 
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string("Mr Jean-DANIEl --") 
     * 
     * {example} standardizeLastName("Mr Jean-DANIEL --") # JEAN DANIEL !.
     */
    public static String standardizeLastName(String lastname) {
        String normalizedLastName = normalizeFirstName(lastname);
        String standardizedLastName = normalizedLastName;
        if(normalizedLastName != null && !"".equals(normalizedLastName)) {
        	standardizedLastName = TalendString.removeAccents(StringUtils.strip((normalizedLastName.toUpperCase())) ).replaceAll("-"," ");
        }
        return standardizedLastName;
    }
    
    /**
     * isNotPhysicalPerson: Identify non physical Person (function NOTUSED at the moment)
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Name
     * 
     * {param} string() 
     * 
     * {example} standardizeLastName() # 
     */
    public static Boolean isNotPhysicalPerson (String field) {
    	Boolean result = false;
    	 Pattern p = Pattern
                 .compile("^\\s?((BCAUTO|AUTOMOBILE|ENCHERES|)\\.?\\s)(.*)$");
         Matcher m = p.matcher(field);

         if (m.find()) {
        	 result = true;
         }
         return result;
    }
	
	
	/**
	 * @author Geoffrey Mathé
	 * 
	 * Cette fonction permet de normaliser les villes (suppression des accents,mise en majuscule, traitement du cas particulier des villes ayant l'acronyme "ST" pour "SAINT", ainsi que "s/" pour "SUR" et "/s" pour "SOUS")
	 * 
	 */
	
    public static String NormalizeCity (String city){
    	String newCity = null;
		
    	if(city != null && !"".equals(city)){
    	
    		newCity = java.text.Normalizer.normalize(city, java.text.Normalizer.Form.NFD).replaceAll("[\u0300-\u036F]","").toUpperCase().replaceAll("^ST", "SAINT").replaceAll(" ST ", " SAINT ").replaceAll("S/", "SUR ").replaceAll("/S", "SOUS ");
    		
    	}
		
		return newCity;
	}
    
	/**
	 * @author Geoffrey Mathé
	 * 
	 * Cette fonction permet d'extraire le code postal contenu dans une adresse complète
	 * 
	 */
    
	public static String FindPostalCode (String adresse){
		
		
		if(adresse != null && !"".equals(adresse)){
		
			String zipCode ="";
		
			Pattern zipPattern = Pattern.compile("(\\d{5})");
			Matcher zipMatcher = zipPattern.matcher(adresse);
			if (zipMatcher.find()) {
				zipCode = zipMatcher.group(1);
				return zipCode;
			}
			
			return null;
		}
		
		return null;
	}
	
	/**
	 * @author Adamou Moussa
	 * 
	 * Cette fonction permet d'extraire le type et le nom de la voie contenus dans format "num+type+nom"  de la voie
	 * 
	 */
    
	public static String FindRouteTypeName (String format){
		
		String route="";
		
		if(format != null && !"".equals(format)){
		
			route =format.replaceAll("[\\d]","").trim();
		}
	return route;
	}
    
	/**
	 * @author Adamou Moussa
	 * 
	 * Cette fonction permet d'extraire le type et le nom de la voie contenus dans format "num+type+nom"  de la voie
	 * 
	 */
    
	public static String FindStreetNumber (String format){
		
		String number="";
		String numberOk="";
		if(format != null && !"".equals(format)){
		
			number =format.split(" ")[0];
		
		if (isNumeric(number)){
			numberOk = number;
		}
        else if(isNumeric(format.substring(0,3)))
        {
        	numberOk=format.substring(0,3);
        }
        else if(isNumeric(format.substring(0,2)))
        {
        	numberOk=format.substring(0,2);
        }
        else if(isNumeric(format.substring(0,1)))
        {
        	numberOk=format.substring(0,1);
        }
        else 
        {
        	numberOk="NA";
        }
		}
		return numberOk;
	}
	/**
	 * @author Geoffrey Mathé
	 * 
	 * Cette fonction permet de vérifier si les codes postaux sont bien formés et de mettre a null ceux qui ne le sont pas 
	 * 
	 */
    
	public static String NormalizePostalCode (String codepostal, String adresse){
		String newPostalCode = null;
		
		if(codepostal != null && !" ".equals(codepostal)){
			if(isNumeric(codepostal) && codepostal.length() == 5){
				newPostalCode = codepostal;
			}
		}
		else{
			newPostalCode = FindPostalCode(adresse);
		}
	
		return newPostalCode;
	}
	
	
	/**
	 * @author Geoffrey Mathé
	 * 
	 * Cette fonction permet de vérifier si les codes postaux ne contiennent pas de chaine de caractère 
	 * 
	 */
    
    public static Boolean isNumeric(String str) {
    	if(str.equals("")){
    		return false;
    	}
    	for(int i=str.length();--i>=0;){ 
    		int chr=str.charAt(i); 
    		if((chr<48&&chr!=45)|| chr>57) 
    		return false;
    		} 
    		return true;
    }
    
    /**
     * standardizePhone: Standardize phone number
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Phone
     * 
     * {param} string() 
     * 
     * {example} standardizePhone() # 
     */
    
	public static String standardizePhone (String originalPhone) {
		String phoneStandardized = null;

		
		if (originalPhone != null && !("".equals(originalPhone.trim()))) { 
			phoneStandardized = originalPhone.replaceAll("[^0-9]", "");
		}
	
		return phoneStandardized;
	}
	
    /**
     * standardizeEmail: Standardize Email
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} DQ_Normalization_Mail
     * 
     * {param} string() 
     * 
     * {example} standardizeEmail()# 
     */
    
	public static String standardizeEmail (String originalEmail) {
		String emailStandardized = null;

		
		if (originalEmail != null && !("".equals(originalEmail.trim())) && !(".".equals(originalEmail.trim()))) { 
			
			if (!("nc".equalsIgnoreCase(originalEmail.trim())) && !("nc.".equalsIgnoreCase(originalEmail.trim()))) {
				
				if (!(originalEmail.toLowerCase().contains("inconnu"))) {
					
					if (!(StringUtils.isNumeric(originalEmail.trim()))) {
						
						emailStandardized = originalEmail.trim();
						emailStandardized = emailStandardized.toLowerCase();
						emailStandardized = emailStandardized.replaceAll(",", ".");
						emailStandardized = emailStandardized.replaceAll(";", ".");
						emailStandardized = emailStandardized.replaceAll("\\.\\.", ".");
						//emailStandardized = emailStandardized.replaceAll("à", "@");
						//accent
						emailStandardized = TalendString.removeAccents(StringUtils.strip((emailStandardized.toLowerCase())));
						
					}					
				}
			}
		}

		return emailStandardized;
	}    

	/**
	 * validateEmail: Validate email
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} DQ_Normalization_Mail
	 * 
	 * {param} string() 
	 * 
	 * {example} validateEmail("example@gmail.com") return true # 
	 */
	public static boolean validateEmail(String mail) {

	    return EmailValidator.getInstance().isValid(mail);

	}
	
	/**
	 * validate Registration number: Validate and Normalize registration number
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} DQ_Normalization_RegistrationNumber
	 * 
	 * {param} string() 
	 * 
	 * {example} validateEmail("example@gmail.com") return true # 
	 */
	public static String normalizeRegistrationNumber(String RN) {
        String normalizedRN = null;
        String normalizeFinal = null;
        
        if(RN != null && !"".equals(RN)) {
        	normalizedRN = RN.replaceAll("-","").replaceAll(" ","");
        	
         	if(IsNewRegistration(normalizedRN) == true){
         		
         		normalizeFinal = FormatNewRN(normalizedRN);
         	}
         	if(IsOldRegistration(normalizedRN)== true){
         		
         		normalizeFinal = FormatOldRN(normalizedRN);
         		
         	}
        }
        
        return normalizeFinal;
    }  
    
	/**
	 * validate Registration number: Recreate Registration Number
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} DQ_Normalization_RegistrationNumber
	 * 
	 * {param} string() 
	 * 
	 * 
	 */
	
public static String FormatNewRN(String RN){
	
	if (RN.length() == 7){
	String RNformated = null;
	String FirstBlock = null;
	String SecondBlock = null;
	String ThirdBlock = null;
	
	FirstBlock = RN.substring(0,2);
	SecondBlock = RN.substring(2,5);
	ThirdBlock = RN.substring(5,7);

	RNformated = FirstBlock + "-" + SecondBlock + "-" + ThirdBlock;
	return RNformated;
			}
	return RN;
}


/**
 * validate Registration number: Recreate Registration Number
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Normalization_RegistrationNumber
 * 
 * {param} string() 
 * 
 * 
 */
public static String FormatOldRN(String RN){
	
	if (RN.length() == 8){
		if(isNumeric(RN.substring(0,4)) == true){
			String RNformated = null;
			String FirstBlock = null;
			String SecondBlock = null;
			String ThirdBlock = null;
			
			FirstBlock = RN.substring(0,4);
			SecondBlock = RN.substring(4,6);
			ThirdBlock = RN.substring(6,8);

			RNformated = FirstBlock + " " + SecondBlock + " " + ThirdBlock;
			return RNformated;
		}
	String RNformated = null;
	String FirstBlock = null;
	String SecondBlock = null;
	String ThirdBlock = null;
	
	FirstBlock = RN.substring(0,3);
	SecondBlock = RN.substring(3,6);
	ThirdBlock = RN.substring(6,8);

	RNformated = FirstBlock + " " + SecondBlock + " " + ThirdBlock;
	return RNformated;
			}
	return RN;
}
    

/**
 * validate Registration number:Verify Registration Number
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Normalization_RegistrationNumber
 * 
 * {param} string() 
 * 
 * 
 */
public static Boolean IsNewRegistration (String RN){
	
	if(RN != null && !"".equals(RN)){
		
		Pattern RNPattern = Pattern.compile("^([A-Z]{1,2}{0,1})[0-9]{1,3}([A-Z]{0,2}{0,1})$");
		Matcher RNMatcher = RNPattern.matcher(RN);
		if (RNMatcher.find()) {
			return true;
		}
		
		return false;
	}
	
	return false;
}


/**
 * validate Registration number:Verify Registration Number
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Normalization_RegistrationNumber
 * 
 * {param} string() 
 * 
 * 
 */
public static Boolean IsOldRegistration (String RN){
	
	if(RN != null && !"".equals(RN)){
		
		Pattern RNPattern = Pattern.compile("^([0-9]{1,4}{0,1})([A-Z]{1,3})({0,1}[0-9]{1,2}[A-Z0-9]{0,1})$");
		Matcher RNMatcher = RNPattern.matcher(RN);
		if (RNMatcher.find()) {
			return true;
		}
		
		return false;
	}
	
	return false;
}

/**
 * validate Registration number:Standardize Registration number
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Standardization_RegistrationNumber
 * 
 * {param} string() 
 * 
 * 
 */
public static String standardizeRegistrationNumber(String RN){
	String standardizeRN = RN;
	if(RN != null && !"".equals(RN)) {
		standardizeRN = RN.replaceAll("-","").replaceAll(" ","");
		return standardizeRN;
	}
	
	return standardizeRN;
	
}


/**
 * validate VIN:Validate VIN structure
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Standardization_VIN
 * 
 * {param} string() 
 * 
 * 
 */

public static Boolean isValidVin(String vin){
	
	if(vin != null && !"".equals(vin)){
		if(vin.length() == 17 && vin.contains("O")==false && vin.contains("Q")==false && vin.contains("I")==false){
			String lastNumbers = vin.substring(13, 17);
				if(isNumeric(lastNumbers)==true){
					return true;
				}
		}
	}
	return false; 
}

/**
 * standardize vin:standardize VIN structure
 * 
 * 
 * {talendTypes} String
 * 
 * {Category} DQ_Standardization_VIN
 * 
 * {param} string() 
 * 
 * 
 */

public static String standardizeVin(String vin){

	if(vin != null && !"".equals(vin)){
		if(vin.contains("O")==true || vin.contains("Q")==true || vin.contains("I")==true){
			return vin.replaceAll("O", "0").replaceAll("Q", "0").replaceAll("I", "1");
			
		}
		return vin;
	}
	return vin;
}


public static String ExtractCity (String adresse){
	
	if(adresse != null && !"".equals(adresse)){
	
		String City ="";
	
		Pattern zipPattern = Pattern.compile("((\\d{5})|(\\d{4}))");
		Matcher zipMatcher = zipPattern.matcher(adresse);
		
		if (zipMatcher.find()) {
		
			City = adresse.substring(zipMatcher.end(), adresse.length());
			
			return City.trim();
		}else{

			return adresse.trim();
		}
	}
	return null;
}

public static String ExtractPostalCode (String adresse){
	
	if(adresse != null && !"".equals(adresse)){
	
		String zipCode ="";
	
		Pattern zipPattern = Pattern.compile("((\\d{5})|(\\d{4}))");
		Matcher zipMatcher = zipPattern.matcher(adresse);
		if (zipMatcher.find()) {
			zipCode = zipMatcher.group(1);

			return zipCode;
		}	
		return null;
	}
	return null;
}

public static void main (String[]  args){  
	
	System.out.println(FindStreetNumber("RUE DU GRAND MOULINET"));
	
}
}




