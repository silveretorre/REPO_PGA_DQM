package routines;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Synaltic_Search {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String searchPerson(String query, String from, String size) throws Exception {
        /*
         {
  "query": {
    "query_string": {
      "query": "Remi ABID",
      "fields": [
        "Person.lastname",
        "Person.firstname",
        "Person.Phone.phone_number_norm",
        "Person.Vehicle_links.Vehicle_link.RegistrationNumber",
        "Person.Vehicle_links.Vehicle_link.vin",
        "Person.Email.email_norm" 
      ]
    }
  },
  "from": "0",
  "size": "20" 
}
         */
    	ObjectMapper mapper = new ObjectMapper();
    	
    	ObjectNode queryRootNode = mapper.createObjectNode();
    	ObjectNode queryStringNode = mapper.createObjectNode();
    	ObjectNode queryNode = mapper.createObjectNode();
    	ObjectNode fieldsNode = mapper.createObjectNode();
    	ArrayNode fieldsArray = mapper.createArrayNode();
    	ObjectNode fromNode = mapper.createObjectNode();
    	ObjectNode sizeNode = mapper.createObjectNode();

    	//Définition des champs dans lesquels la recherche sera effectuée
    	fieldsArray.add("Person.lastname");
    	fieldsArray.add("Person.firstname");
    	fieldsArray.add("Person.Phone.phone_number_norm");
    	fieldsArray.add("Person.Vehicle_links.Vehicle_link.RegistrationNumber");
    	fieldsArray.add("Person.Vehicle_links.Vehicle_link.vin");
    	fieldsArray.add("Person.Email.email_norm");
    	
    	queryNode.put("query", query);
    	fieldsNode.putPOJO("fields",fieldsArray);
    	queryStringNode.putPOJO("query_string", queryNode);
    	queryStringNode.putPOJO("query_string", fieldsNode);
    	queryRootNode.putPOJO("query",queryStringNode);
    	queryRootNode.put("from",from);
    	queryRootNode.put("size",size);
    	
    	
    	System.out.println(mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode));    
   
    	return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(queryRootNode);

    	 
    	
    	
    }
    
    public static void main(String[] args){
    	try {
			searchPerson("toto",0,10);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}
